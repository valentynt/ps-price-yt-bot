// import "dotenv/config";
// import { Telegraf } from "telegraf";
// import { getYouTubeTrailer } from "./services/youtube.js";
// import { getPSPrice } from "./services/psstore.js";

// const BOT_TOKEN = process.env.TELEGRAM_TOKEN;
// const PS_LOCALE = process.env.PS_LOCALE || "uk-ua";
// if (!BOT_TOKEN) throw new Error("Missing TELEGRAM_TOKEN in .env");

// const bot = new Telegraf(BOT_TOKEN);

// // --- helpers ---
// const htmlEscape = (s = "") =>
//   String(s)
//     .replace(/&/g, "&amp;")
//     .replace(/</g, "&lt;")
//     .replace(/>/g, "&gt;")
//     .replace(/"/g, "&quot;")
//     .replace(/'/g, "&#39;");

// const normalizeGameName = (s = "") => s.trim().replace(/\s+/g, " ");
// const toTitleCase = (s = "") =>
//   s
//     .toLowerCase()
//     .split(" ")
//     .map((w) => (w ? w[0].toUpperCase() + w.slice(1) : w))
//     .join(" ");

// // --- commands ---
// bot.start((ctx) =>
//   ctx.reply(
//     "–ü—Ä–∏–≤–µ—Ç! –ü–∏—à–∏: game <–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã> –∏–ª–∏ /game <–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã> (–∏—â—É PS5 –≤ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º PS Store)."
//   )
// );

// // —Ä–µ–∞–≥–∏—Ä—É–µ–º –∏ –Ω–∞ "/game ..." –∏ –Ω–∞ "game ..."
// bot.hears(/^\/?game\b/i, async (ctx) => {
//   const raw = ctx.message.text.replace(/^\/?game\s*/i, "");
//   const query = normalizeGameName(raw);
//   if (!query)
//     return ctx.reply("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã game");

//   const displayName = toTitleCase(query);
//   const searchUrl = `https://store.playstation.com/${PS_LOCALE}/search/${encodeURIComponent(
//     query
//   )}`;
//   console.log(`üîç PS Store search: ${searchUrl}`);

//   await ctx.reply(
//     `–ò—â—É: ${htmlEscape(
//       displayName
//     )} ‚Ä¶\nüîç <a href="${searchUrl}">–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫ –≤ PS Store</a>`,
//     { parse_mode: "HTML" }
//   );

//   try {
//     // 1) –¶–µ–Ω–∞ / –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ PS Store (—Ç–æ–ª—å–∫–æ PS5, –ø–µ—Ä–≤—ã–µ 10 –∫–∞—Ä—Ç–æ—á–µ–∫)
//     const priceInfo = await getPSPrice(query, PS_LOCALE).catch(() => null);
//     if (priceInfo?.url) console.log(`üõí Product page used: ${priceInfo.url}`);

//     // 2) –¢—Ä–µ–π–ª–µ—Ä –∏—â–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–∑ —Å—Ç–æ—Ä–∞ (–ª—É—á—à–∏–π –º–∞—Ç—á)
//     const trailerSearchName = priceInfo?.title || displayName;
//     console.log(`üé¨ YouTube trailer search: ${trailerSearchName}`);
//     const yt = await getYouTubeTrailer(trailerSearchName).catch(() => null);

//     // 3) –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–Ω–æ–π (HTML + –ø—Ä–µ–≤—å—é PS Store –æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∫–ª—é—á—ë–Ω–Ω—ã–º)
//     const lines = [];
//     lines.push(`üéÆ <b>${htmlEscape(priceInfo?.title || displayName)}</b>`);

//     if (priceInfo) {
//       if (priceInfo.notFoundForPS5) {
//         lines.push("üíΩ –î–ª—è PS5 –Ω–µ—Ç –∏–≥—Ä—ã –≤ —ç—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–µ.");
//       } else if (priceInfo.price) {
//         lines.push(
//           `üí∞ –¶–µ–Ω–∞ –≤ PS Store (${htmlEscape(PS_LOCALE)}): ${htmlEscape(
//             priceInfo.price
//           )}`
//         );
//         if (priceInfo.url) lines.push(`üõí ${htmlEscape(priceInfo.url)}`);
//       } else {
//         lines.push("üí∞ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–¥—ë–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–Ω—É.");
//       }
//     } else {
//       lines.push("üí∞ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –∏–∑ PS Store.");
//     }

//     await ctx.replyWithHTML(lines.join("\n"), {
//       disable_web_page_preview: false,
//     });

//     // 4) –û—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî —Ç—Ä–µ–π–ª–µ—Ä —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º –ø—Ä–µ–≤—å—é –∏ –∫–Ω–æ–ø–∫–æ–π Play
//     if (yt) {
//       // –í–∞–∂–Ω–æ: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∏—Å—Ç—É—é —Å—Å—ã–ª–∫—É –±–µ–∑ markdown/HTML ‚Äî —Ç–∞–∫ Telegram –ø–æ–¥—Ç—è–Ω–µ—Ç –ø—Ä–µ–≤—å—é —Å –∫–Ω–æ–ø–∫–æ–π.
//       await ctx.reply(`üé¨ ${yt.title}\n${yt.url}`, {
//         disable_web_page_preview: false,
//       });
//     } else {
//       const q = encodeURIComponent(`${trailerSearchName} PS5 trailer`);
//       const searchLink = `https://www.youtube.com/results?search_query=${q}`;
//       await ctx.reply(`üé¨ –¢—Ä–µ–π–ª–µ—Ä: –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n${searchLink}`, {
//         disable_web_page_preview: false,
//       });
//     }
//   } catch (err) {
//     console.error(err);
//     await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.");
//   }
// });

// // telegraf / process errors
// bot.catch((err, ctx) => {
//   console.error(
//     `Telegraf error for update ${ctx?.update?.update_id ?? "-"}:`,
//     err
//   );
// });
// process.on("unhandledRejection", (err) =>
//   console.error("unhandledRejection:", err)
// );
// process.on("uncaughtException", (err) =>
//   console.error("uncaughtException:", err)
// );

// // run bot
// (async () => {
//   try {
//     await bot.launch({
//       dropPendingUpdates: true,
//       allowedUpdates: ["message"],
//       polling: { timeout: 30 },
//     });
//     console.log("Bot started");
//   } catch (e) {
//     console.error("Bot launch failed:", e);
//   }
// })();

// process.once("SIGINT", () => process.exit(0));
// process.once("SIGTERM", () => process.exit(0));



// import "dotenv/config";
// import { Telegraf } from "telegraf";
// import { getYouTubeTrailer } from "./services/youtube.js";
// import { getPSPrice } from "./services/psstore.js";

// const BOT_TOKEN = process.env.TELEGRAM_TOKEN;
// const PS_LOCALE = process.env.PS_LOCALE || "uk-ua";
// if (!BOT_TOKEN) throw new Error("Missing TELEGRAM_TOKEN in .env");

// const bot = new Telegraf(BOT_TOKEN);

// // helpers
// const htmlEscape = (s = "") =>
//   String(s)
//     .replace(/&/g, "&amp;")
//     .replace(/</g, "&lt;")
//     .replace(/>/g, "&gt;")
//     .replace(/"/g, "&quot;")
//     .replace(/'/g, "&#39;");

// const normalizeGameName = (s = "") => s.trim().replace(/\s+/g, " ");
// const toTitleCase = (s = "") =>
//   s
//     .toLowerCase()
//     .split(" ")
//     .map((w) => (w ? w[0].toUpperCase() + w.slice(1) : w))
//     .join(" ");

// // /start
// bot.start((ctx) =>
//   ctx.reply(
//     "–ü—Ä–∏–≤–µ—Ç! –ü–∏—à–∏: game <–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã> –∏–ª–∏ /game <–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã> (–∏—â—É PS5 –≤ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º PS Store)."
//   )
// );

// // —Ä–µ–∞–≥–∏—Ä—É–µ–º –∏ –Ω–∞ "/game ..." –∏ –Ω–∞ "game ..."
// bot.hears(/^\/?game\b/i, async (ctx) => {
//   const raw = ctx.message.text.replace(/^\/?game\s*/i, "");
//   const query = normalizeGameName(raw);
//   if (!query)
//     return ctx.reply("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã game");

//   const displayName = toTitleCase(query);
//   const searchUrl = `https://store.playstation.com/${PS_LOCALE}/search/${encodeURIComponent(
//     query
//   )}`;
//   console.log(`üîç PS Store search: ${searchUrl}`);

//   await ctx.reply(
//     `–ò—â—É: ${htmlEscape(
//       displayName
//     )} ‚Ä¶\nüîç <a href="${searchUrl}">–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫ –≤ PS Store</a>`,
//     { parse_mode: "HTML" }
//   );

//   try {
//     // 1) –¶–µ–Ω–∞ / –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ PS Store (—Ç–æ–ª—å–∫–æ PS5, –¥–æ 10 –∫–∞—Ä—Ç–æ—á–µ–∫)
//     const priceInfo = await getPSPrice(query, PS_LOCALE).catch(() => null);
//     if (priceInfo?.url) console.log(`üõí Product page used: ${priceInfo.url}`);

//     // 2) –¢—Ä–µ–π–ª–µ—Ä –∏—â–µ–º –ø–æ –∏–º–µ–Ω–∏ –∏–∑ —Å—Ç–æ—Ä–∞ (–ª—É—á—à–µ –º–∞—Ç—á)
//     const trailerSearchName = priceInfo?.title || displayName;
//     console.log(`üé¨ YouTube trailer search: ${trailerSearchName}`);
//     const yt = await getYouTubeTrailer(trailerSearchName).catch(() => null);

//     // 3) –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–Ω–æ–π
//     const lines = [];
//     lines.push(`üéÆ <b>${htmlEscape(priceInfo?.title || displayName)}</b>`);

//     if (priceInfo) {
//       if (priceInfo.notFoundForPS5) {
//         lines.push("üíΩ –î–ª—è PS5 –Ω–µ—Ç –∏–≥—Ä—ã –≤ —ç—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–µ.");
//       } else if (priceInfo.price) {
//         lines.push(
//           `üí∞ –¶–µ–Ω–∞ –≤ PS Store (${htmlEscape(PS_LOCALE)}): ${htmlEscape(
//             priceInfo.price
//           )}`
//         );
//         if (priceInfo.url) lines.push(`üõí ${htmlEscape(priceInfo.url)}`);
//       } else {
//         lines.push("üí∞ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–¥—ë–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–Ω—É.");
//       }
//     } else {
//       lines.push("üí∞ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –∏–∑ PS Store.");
//     }

//     await ctx.replyWithHTML(lines.join("\n"), {
//       disable_web_page_preview: false,
//     });

//     // 4) –û—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî —Ç—Ä–µ–π–ª–µ—Ä (–ª–∏–Ω–∫, —á—Ç–æ–±—ã –¢–µ–ª–µ–≥—Ä–∞–º –ø–æ–¥—Ç—è–Ω—É–ª –ø—Ä–µ–≤—å—é —Å –∫–Ω–æ–ø–∫–æ–π Play)
//     if (yt) {
//       await ctx.reply(`üé¨ ${yt.title}\n${yt.url}`, {
//         disable_web_page_preview: false,
//       });
//     } else {
//       const q = encodeURIComponent(`${trailerSearchName} PS5 trailer`);
//       const searchLink = `https://www.youtube.com/results?search_query=${q}`;
//       await ctx.reply(`üé¨ –¢—Ä–µ–π–ª–µ—Ä: –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n${searchLink}`, {
//         disable_web_page_preview: false,
//       });
//     }
//   } catch (err) {
//     console.error(err);
//     await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.");
//   }
// });

// // errors & run
// bot.catch((err, ctx) => {
//   console.error(
//     `Telegraf error for update ${ctx?.update?.update_id ?? "-"}:`,
//     err
//   );
// });
// process.on("unhandledRejection", (err) =>
//   console.error("unhandledRejection:", err)
// );
// process.on("uncaughtException", (err) =>
//   console.error("uncaughtException:", err)
// );

// (async () => {
//   try {
//     await bot.launch({
//       dropPendingUpdates: true,
//       allowedUpdates: ["message"],
//       polling: { timeout: 30 },
//     });
//     console.log("Bot started");
//   } catch (e) {
//     console.error("Bot launch failed:", e);
//   }
// })();

// process.once("SIGINT", () => process.exit(0));
// process.once("SIGTERM", () => process.exit(0));



import "dotenv/config";
import { Telegraf } from "telegraf";
import { getYouTubeTrailer } from "./services/youtube.js";

const BOT_TOKEN = process.env.TELEGRAM_TOKEN;
const PS_LOCALE = process.env.PS_LOCALE || "uk-ua";
if (!BOT_TOKEN) throw new Error("Missing TELEGRAM_TOKEN in .env");

const bot = new Telegraf(BOT_TOKEN);

// helpers
const htmlEscape = (s = "") =>
  String(s)
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#39;");

const normalizeGameName = (s = "") => s.trim().replace(/\s+/g, " ");
const toTitleCase = (s = "") =>
  s
    .toLowerCase()
    .split(" ")
    .map((w) => (w ? w[0].toUpperCase() + w.slice(1) : w))
    .join(" ");

function buildStoreSearchLink(q) {
  return `https://store.playstation.com/${PS_LOCALE}/search/${encodeURIComponent(
    q
  )}`;
}

// /start
bot.start((ctx) =>
  ctx.reply(
    "–ü—Ä–∏–≤–µ—Ç! –ü–∏—à–∏: game <–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã> –∏–ª–∏ /game <–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã>.\n–Ø –ø—Ä–∏—à–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–∏—Å–∫ –≤ PS Store –∏ —Ç—Ä–µ–π–ª–µ—Ä —Å YouTube."
  )
);

// —Ä–µ–∞–≥–∏—Ä—É–µ–º –∏ –Ω–∞ "/game ..." –∏ –Ω–∞ "game ..."
bot.hears(/^\/?game\b/i, async (ctx) => {
  const raw = ctx.message.text.replace(/^\/?game\s*/i, "");
  const query = normalizeGameName(raw);
  if (!query)
    return ctx.reply("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã game");

  const displayName = toTitleCase(query);
  const searchUrl = buildStoreSearchLink(query);

  // —à–∞–ø–∫–∞: —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫
  await ctx.reply(
    `–ò—â—É: ${htmlEscape(
      displayName
    )} ‚Ä¶\nüîé <a href="${searchUrl}">–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫ –≤ PS Store</a>`,
    { parse_mode: "HTML", disable_web_page_preview: true }
  );

  try {
    // —Ç—Ä–µ–π–ª–µ—Ä: –ø—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ ¬´–∏–≥—Ä–æ–≤–æ–π¬ª –∑–∞–ø—Ä–æ—Å, –∑–∞—Ç–µ–º –∑–∞–ø–∞—Å–Ω–æ–π
    const primaryQuery = `${displayName} PS5 official trailer`;
    let yt = await getYouTubeTrailer(primaryQuery).catch(() => null);
    if (!yt) {
      const fallbackQuery = `${displayName} official trailer game`;
      yt = await getYouTubeTrailer(fallbackQuery).catch(() => null);
    }

    if (yt) {
      // –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî —Å—Å—ã–ª–∫–∞, —á—Ç–æ–±—ã Telegram –ø–æ–∫–∞–∑–∞–ª –ø—Ä–µ–≤—å—é —Å –∫–Ω–æ–ø–∫–æ–π Play
      await ctx.reply(`üé¨ ${yt.title}\n${yt.url}`, {
        disable_web_page_preview: false,
      });
    } else {
      const q = encodeURIComponent(`${displayName} PS5 trailer`);
      const ytSearch = `https://www.youtube.com/results?search_query=${q}`;
      await ctx.reply(`üé¨ –¢—Ä–µ–π–ª–µ—Ä: –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n${ytSearch}`, {
        disable_web_page_preview: false,
      });
    }
  } catch (err) {
    console.error(err);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.");
  }
});

// errors & run
bot.catch((err, ctx) => {
  console.error(
    `Telegraf error for update ${ctx?.update?.update_id ?? "-"}:`,
    err
  );
});
process.on("unhandledRejection", (err) =>
  console.error("unhandledRejection:", err)
);
process.on("uncaughtException", (err) =>
  console.error("uncaughtException:", err)
);

(async () => {
  try {
    await bot.launch({
      dropPendingUpdates: true,
      allowedUpdates: ["message"],
      polling: { timeout: 30 },
    });
    console.log("Bot started");
  } catch (e) {
    console.error("Bot launch failed:", e);
  }
})();

process.once("SIGINT", () => process.exit(0));
process.once("SIGTERM", () => process.exit(0));
